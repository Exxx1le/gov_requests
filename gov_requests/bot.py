import os
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BotCommand, BotCommandScopeDefault, CallbackQuery, FSInputFile, Message
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

from config import TELEGRAM_BOT_KEY
from utils import process_documents

bot = Bot(token=TELEGRAM_BOT_KEY)
dp = Dispatcher()


@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å –ø–æ—Ä—Ç–∞–ª–∞ publication.pravo.gov.ru"
    )


@dp.message(Command(commands=["help"]))
async def process_help_command(message: Message):
    await message.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_documents –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç")


class DateInput(StatesGroup):
    waiting_for_dates = State()


@dp.message(Command(commands=["get_documents"]))
async def start_date_input(message: Message, state: FSMContext):
    await state.set_state(DateInput.waiting_for_dates)
    calendar = SimpleCalendar()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:", reply_markup=await calendar.start_calendar()
    )


@dp.callback_query(SimpleCalendarCallback.filter())
async def process_calendar(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback_query, callback_data)

    if selected:
        data = await state.get_data()

        if "start_date" not in data:
            await state.update_data(start_date=date)
            await callback_query.message.answer(
                f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {date.strftime('%Y-%m-%d')}\n" f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=await calendar.start_calendar(),
            )
        else:
            start_date = data["start_date"]
            if date < start_date:
                await callback_query.message.answer(
                    "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                    reply_markup=await calendar.start_calendar(),
                )
                return

            await callback_query.message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            process_documents(start_date, date)

            doc_path = str(Path.home() / "output_documents.docx")
            try:
                await callback_query.message.answer_document(FSInputFile(doc_path))
                os.remove(doc_path)
            except Exception as e:
                await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            finally:
                if os.path.exists(doc_path):
                    os.remove(doc_path)
                await state.clear()


@dp.message(F.content_type != "text")
async def send_other(message: Message):
    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å üò¢")


# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="get_documents", description="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"),
    ]

    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())


# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def start_bot():
    await set_commands()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(start_bot())
